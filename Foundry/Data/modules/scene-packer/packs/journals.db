{"_id":"3yWnmRLORfI3Wa6x","name":"Read Me","content":"<h1>Library: Scene Packer</h1>\n<p>Scene Packer is a library that is primarily used by content creators to assist with packaging an adventure module for distribution to other GMs. As a GM there is very little you need to do yourself, other than have the module installed and enabled.</p>\n<h2>Usage as a GM</h2>\n<p>@Compendium[scene-packer.journals.6W7WVWeexVsFhtSQ]{Usage as a GM}</p>\n<h2>Usage as a Content Creator</h2>\n<p>@Compendium[scene-packer.journals.5H4wVwtnrbhZE8Ko]{Usage as a Content Creator}</p>","folder":null,"sort":0,"permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"flags":{"core":{"sourceId":"JournalEntry.0Lr0QUSE5j1xgzuc"}}}
{"_id":"5H4wVwtnrbhZE8Ko","name":"Usage as a Content Creator","content":"<h1>Using Scene Packer as a Content Creator</h1>\n<p>Scene Packer is a library to help content creators package up Scenes and Adventures to solve several frustrations when importing Scenes from a module. With Scene Packer the following works:</p>\n<ul>\n<li>Scene Journal Pins link to the correct Journal.\n<ul>\n<li>This is the feature that started this module. I was frustrated that I could put a Scene into a compendium with journal pins and then when I imported from a compendium, the journal pin was there, but didn't load anything. This module gives you portable compendium journal pins that link to the original journal entry. The journal links will persist when importing from compendiums.</li>\n</ul>\n</li>\n<li>Actor tokens on a Scene link to the correct Actor.\n<ul>\n<li>The second frustration that prompted this module. Normally you would import a Scene with Actor tokens on it and they look correct, but don't open anything. So you would have to go through and link them all up again manually. This module gives you portable compendium actor tokens on a scene that link to the original actor data automatically.</li>\n</ul>\n</li>\n<li>Journals configured for the Scene link correctly.\n<ul>\n<li>No longer will the Journal dropdown on the Scene configuration screen be empty when importing from a compendium.</li>\n</ul>\n</li>\n<li>Playlists configured for the Scene link correctly.\n<ul>\n<li>No longer will the Playlist dropdown on the Scene configuration screen be empty when importing from a compendium.</li>\n</ul>\n</li>\n<li>Imported Journals link correctly to other Journal entries.\n<ul>\n<li>By using the automatic link fixer, you won't have broken links due to Journals referencing World entities, rather than compendium entities.</li>\n</ul>\n</li>\n<li>Actors, Journals and Playlists referenced by a Scene are automatically imported.</li>\n<li><a href=\"https://foundryvtt.com/packages/quick-encounters\">Quick Encounters</a> work, creating working journal pins that you can double-click on and actors that are linked correctly.</li>\n<li>You can provide a list of Journals and/or Macros that you want to ensure are imported to the world.</li>\n<li>Entities can be imported with deep folder structures, allowing you as a content creator to have additional folders for journal handouts for instance. (Makes use of the <a href=\"https://foundryvtt.com/packages/compendium-folders\" target=\"_blank\" rel=\"noopener\">Compendium Folders</a> module during packing. End users <em>do not</em> need the Compendium Folders module installed. See the bundled @Compendium[scene-packer.journals.Y8WpVXdzGXRv93gf]{journal entry} for more information).</li>\n</ul>\n<p>In summary, it makes importing a Scene from a Compendium (via an \"adventure module\") work as though you build it in your world.</p>\n<p>Scene Packer is system agnostic, it doesn't matter whether you're packaging up a D&amp;D5e module, or a Pathfinder one, or an Alien RPG one, Scene Packer doesn't mind.</p>\n<h2>Where do I start?</h2>\n<p>I have put together a site to help build your first module (with or without Scene Packer integration). It takes all of the guess work out of creating your first module, and in a lot of cases means that you don't have to do anything in a text-editor. Simply fill in the form and download your ready-to-go module zip file. <a href=\"https://sneat.github.io/scene-packer-module-generator/\" target=\"_blank\" rel=\"noopener\">https://sneat.github.io/scene-packer-module-generator/</a></p>\n<p>There is also a how to tutorial video which you can follow along with (and is <em>highly recommended</em>):</p>\n<p><iframe title=\"YouTube video player\" src=\"https://www.youtube.com/embed/cG6qtoZPczI\" width=\"560\" height=\"315\"></iframe></p>\n<h2>Moulinette</h2>\n<p>v2.4.0 of Scene Packer added integration with <a href=\"https://www.moulinette.cloud/\" target=\"_blank\" rel=\"noopener\">Moulinette</a> to make it even easier to distribute your packaged adventures and content.</p>\n<p>@Compendium[scene-packer.journals.wKfAMThrphxfL8z7]{Moulinette Integration}</p>\n<h2>Asset Report</h2>\n<p>Additionally, <code>Scene Packer</code> contains an <code>Asset Report</code> (accessible via the bundled @Compendium[scene-packer.macros.mkNKay70v790Fu4h]{Macro} or by right clicking on a Scene in the sidebar) which details which assets will have broken references when imported into someone else's world.</p>\n<p><iframe title=\"YouTube video player\" src=\"https://www.youtube.com/embed/GgEQgl4fAjw\" width=\"560\" height=\"315\"></iframe></p>\n<h2>Using Scene Packer in your Module</h2>\n<p>To use the Scene Packer as part of your module you will need to add it as a dependency in your <code>module.json</code> file as well as add/update your module javascript (see Module code requirements below).</p>\n<p><span style=\"color:#191813\">If you would like some help packing your module, feel free to stop by my </span><a href=\"https://discord.com/invite/HY3xhBEf2A\" target=\"_blank\" rel=\"noopener\"><img style=\"vertical-align:middle;border:none\" src=\"https://github.com/League-of-Foundry-Developers/scene-packer/raw/main/assets/icons/hand-truck.png\" width=\"24\" height=\"24\" /> Scene Packer discord</a><span style=\"color:#191813\"> server and I will happily help.</span></p>\n<pre><code>\"relationships\": {\n  \"requires\": [\n    {\n      \"id\": \"scene-packer\",\n      \"type\": \"module\"\n    }\n  ]\n}</code></pre>\n<h2>Module code requirements</h2>\n<p>Once you have added Scene Packer as a dependency you need to add some initialisation code to register your module with Scene Packer.</p>\n<p>Include the following in your <a href=\"https://foundryvtt.com/article/module-development/#includes\" target=\"_blank\" rel=\"noopener\">module javascript</a>, updating the variable names where appropriate.</p>\n<p>@Compendium[scene-packer.journals.d1ZkWfANsQYKSuty]{Example module javascript}</p>\n<h2>Packing your Scenes</h2>\n<p>The steps for packing each of your scenes are listed in a seperate journal entry to prevent you needing to scroll back and forth.</p>\n<p>@Compendium[scene-packer.journals.l4B4aob1n9tM2DJv]{Packing your Scenes}</p>\n<p>If you want to prevent an Actor Token being packed within a Scene, you can select the \"None\" option in the \"Represented Actor\" drop down field. This will skip the actor and it will remain as an unlinked Token in your Scene. You might want to do this to prevent an automatic actor import, or if you make use of \"control tokens\" with the Token Attacher module.</p>\n<h2>Updating Journal links</h2>\n<p>When you build an adventure module, it's a painful process updating all of your Journal references to link to the compendium versions. You can simplify this by running the following command in your browser console putting in your appropriate module name (as per your manifest json name):</p>\n<pre>await ScenePacker.RelinkJournalEntries('module-name', {dryRun: false});</pre>\n<p>Alternatively, you can run the macro: @Compendium[scene-packer.macros.IeiuU5QSNgwJygTL]{Relink compendium journal entries}</p>\n<p>This will automatically go through the Journal compendiums that belong to your module, and change the reference links to the compendium versions. For example, if you had a link to <code>@​Actor[alvhCr52HIrWmoez]{Commoner}</code> it would change it to <code>@​Compendium[your-module.actors.lOBiqShvkT83eGzY]{Commoner}</code> using your module and compendium names and ID references. Note that there is a zero-width character in this journal markup purely to prevent the links from rendering as links, allowing you to see the code.</p>\n<p> </p>\n<h2>Macros</h2>\n<p>There are several Macros included in the <code>Library: Scene Packer</code> compendium entry.  Each macro has a comment at the top describing its purpose. It is well worth having a look at what is available there.</p>\n<p> </p>\n<p>There is even a macro there that you can use as the basis for recommending modules for use with your own module.</p>\n<p> </p>\n<h2>Quick Encounters</h2>\n<p>See @Compendium[scene-packer.journals.9uxj0T3z1vTUNkVx]{Packing a scene that contains a Quick Encounter} for how to pack and distribute scenes with embedded Quick Encounters.</p>\n<p> </p>\n<h2>Example Module</h2>\n<p>There is a public module that you can view/install to see a showcase of the various features within Scene Packer.</p>\n<p><a href=\"https://github.com/sneat/example-scene-packer\" target=\"_blank\" rel=\"noopener\">https://github.com/sneat/example-scene-packer</a></p>\n<p> </p>\n<p>There is also a public module that you can use as a starting point with Scene Packer. It describes in the <a href=\"https://github.com/sneat/starter-scene-packer/blob/main/readme.md\" target=\"_blank\" rel=\"noopener\">readme</a> the steps that you can take to get started with your first module.</p>\n<p><a href=\"https://github.com/sneat/starter-scene-packer\" target=\"_blank\" rel=\"noopener\">https://github.com/sneat/starter-scene-packer</a></p>\n<p> </p>\n<p>In most cases though, you're best off just making use of the module generator and then tweaking to your needs.</p>\n<p><a href=\"https://sneat.github.io/scene-packer-module-generator/\" target=\"_blank\" rel=\"noopener\">https://sneat.github.io/scene-packer-module-generator/</a></p>\n<p> </p>\n<h2>Help! I have an issue!</h2>\n<p><span style=\"color:#191813\">Please report issues via the </span><a style=\"box-sizing:border-box;user-select:text\" href=\"https://foundryvtt.com/packages/bug-reporter\" target=\"_blank\" rel=\"noopener\">Bug Reporter</a><span style=\"color:#191813\"> module, or join the </span><a href=\"https://discord.com/invite/HY3xhBEf2A\" target=\"_blank\" rel=\"noopener\"><img style=\"vertical-align:middle;border:none\" src=\"https://github.com/League-of-Foundry-Developers/scene-packer/raw/main/assets/icons/hand-truck.png\" width=\"24\" height=\"24\" /> Scene Packer discord</a><span style=\"color:#191813\"> server.</span></p>\n<p> </p>","folder":null,"sort":0,"permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"flags":{"core":{"sourceId":"JournalEntry.IJZq4OejTztoFg23"}}}
{"_id":"6W7WVWeexVsFhtSQ","name":"Usage as a GM","permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"folder":"","flags":{},"content":"<h1>Using Scene Packer as a GM</h1>\n<p>Using modules that have been packed with Scene Packer is very straight forward. When you first enable a module packed with Scene Packer, it will prompt you asking you if you want to import all of the Scenes.</p>\n<p><img src=\"https://assets.forge-vtt.com/bazaar/modules/scene-packer/assets/base64data/ebaab2b8808cf8870e52243cad194c05.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<p>Selecting \"<strong>Yes import all</strong>\" will import all of the Scenes into a folder, unpack them and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<p>Selecting \"<strong>Let me choose</strong>\" will open the Scene compendium allowing you to manually import just the Scenes you want. The first time you view a Scene, it will unpack itself automatically and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<p>If you choose the \"<strong>Don't ask me again</strong>\" option and now want to import the Scenes, you can manually import any of the Scenes from the module Compendium. The first time you view a Scene it will unpack itself automatically and you'll be ready to go.</p>\n<p>&nbsp;</p>\n<h2>What is this \"Pack Scene Data\" option I see when I right-click on a Scene?</h2>\n<p><img src=\"https://assets.forge-vtt.com/bazaar/modules/scene-packer/assets/base64data/c6b7c8c4647108babfae945fd7247a3e.png\" alt=\"\" /></p>\n<p>This option is used by module developers. You should not need to select this option, otherwise you will waste CPU time packing and then unpacking your scene data. If you accidentally click it, simply choose the \"Clear Packed Scene Data\" from the same context menu. To hide the option, uncheck the module setting called \"Enable Scene Packer context menu\".</p>\n<p><img src=\"https://assets.forge-vtt.com/bazaar/modules/scene-packer/assets/base64data/b4b2a0d73e1504c112e7e2a47899110c.png\" alt=\"\" /></p>\n<p>&nbsp;</p>\n<h2>Help! I have an issue!</h2>\n<p>Please report issues via the <a href=\"https://foundryvtt.com/packages/bug-reporter\" target=\"_blank\" rel=\"noopener\">Bug Reporter</a> module, or join the <a href=\"https://discord.com/invite/HY3xhBEf2A\" target=\"_blank\" rel=\"noopener\"><img style=\"vertical-align: middle; border: none;\" src=\"https://github.com/League-of-Foundry-Developers/scene-packer/raw/main/assets/icons/hand-truck.png\" alt=\"Scene Packer\" width=\"24\" height=\"24\" /> Scene Packer discord</a> server.</p>"}
{"_id":"9uxj0T3z1vTUNkVx","name":"Packing a scene that contains a Quick Encounter","content":"<h1>How to</h1>\n<p>The following are the steps to take to correctly pack a scene that contains <a href=\"https://foundryvtt.com/packages/quick-encounters\" target=\"_blank\" rel=\"noopener\">Quick Encounter</a> data.</p>\n<p>These steps assume that you are familiar with how to use Scene Packer. See @Compendium[scene-packer.journals.5H4wVwtnrbhZE8Ko]{Usage as a Content Creator}.</p>\n<ol>\n<li>Create your Scene as you normally would.</li>\n<li>Import your monsters/enemies from a compendium pack into your world (e.g. Monsters (SRD) (dnd5e)) or create your NPC actors manually in your world.</li>\n<li>Drag your monsters/enemies onto your scene, placing them appropriately.</li>\n<li>Follow the <a href=\"https://foundryvtt.com/packages/quick-encounters\" target=\"_blank\" rel=\"noopener\">Quick Encounter</a> steps to create your quick encounter.\n<ul>\n<li>For example, select all monsters/enemies on the scene and click on the Quick Encounters button in the sidebar.</li>\n</ul>\n</li>\n<li>You should now have a Journal Pin on the map, and the monsters/enemies should have disappeared.</li>\n<li>Export the monsters/enemies to your module's Actor compendium.\n<ul>\n<li>The actor compendium you export to must be one that is referenced as one of the <code>creaturePacks</code> in your module's javascript initialisation code. See @Compendium[scene-packer.journals.d1ZkWfANsQYKSuty]{Example module javascript}.</li>\n</ul>\n</li>\n<li>Export the Journal entry/entries created by Quick Encounter to your module's Journal compendium.\n<ul>\n<li>The journal compendium you export to must be one that is referenced as one of the <code>journalPacks</code> in your module's javascript initialisation code. See @Compendium[scene-packer.journals.d1ZkWfANsQYKSuty]{Example module javascript}.</li>\n</ul>\n</li>\n<li>Run the @Compendium[scene-packer.macros.IeiuU5QSNgwJygTL]{Relink compendium journal entries} macro to update the references within the Quick Encounter journal/s.</li>\n<li>Right click on your Scene in the sidebar and choose \"Pack Scene Data\"</li>\n<li>Export your Scene to your module's Scene compendium.</li>\n</ol>","folder":null,"sort":0,"permission":{"default":0,"Rt2brfVFebtCuVnc":3},"flags":{"core":{"sourceId":"JournalEntry.SWRFeKvdoUS2Kc4i"}}}
{"_id":"Y8WpVXdzGXRv93gf","name":"Packing folder structures (Compendium Folders)","content":"<p>Scene Packer will look for data embedded by the <a href=\"https://foundryvtt.com/packages/compendium-folders\" target=\"_blank\" rel=\"noopener\">Compendium Folders</a> module when it is importing entities. This means that you (as a content creator) can prepare a folder structure that makes sense for your adventure and have the end-user receive that same structure when they import via Scene Packer.</p>\n<p> </p>\n<p>An example folder structure:</p>\n<pre><code>My Cool Adventure\n│   Welcome and thanks\n│   Credits\n│   \n└───Handouts\n│   │   Approach\n│   │   Big Bad Boss Guy\n│\n└───Keyed Locations\n    │   01 - Entry\n    │   02 - Main hall\n    │   ...\n    │\n    └───Lair\n        │   a - Trap\n        │   b - Nest\n        │   ...</code></pre>\n<p>The end-user would then end up with this same folder structure when they import your adventure via Scene Packer.</p>\n<p> </p>\n<h2>How to pack</h2>\n<p>To utilise this feature, you simply need to use the \"Export Folder Structure\" functionality of the Compendium Folders module. Scene Packer will then read the data embedded within your compendium to re-create the intended folder structure.</p>\n<p>The end-user <em>does not</em> need to have the Compendium Folders module installed.</p>\n<p> </p>\n<p><strong>Note</strong>: automatic folder structure creation will only happen for entities imported by the Scene Packer module (such as linked Journals and Actors). It will not create folders for Scenes unless the end-user choose the \"Import All\" option presented when they first enable the module. Importing directly from the Compendium will not automatically create the folders.</p>","folder":null,"sort":0,"permission":{"default":0,"FYKEkGQDWeedzh8v":3},"flags":{"core":{"sourceId":"JournalEntry.xEff7vLf75ZEC00o"},"scene-packer":{"sourceId":"JournalEntry.xEff7vLf75ZEC00o"}}}
{"_id":"d1ZkWfANsQYKSuty","name":"Example module javascript","content":"<p>The following is an example of the javascript that you would put into your module, adjusting names as appropriate.</p>\n<hr />\n<pre><code>(() =&gt; {\n  const adventureName = 'Example Scene Packer';\n  const moduleName = 'example-scene-packer';\n\n  /**\n   * welcomeJournal (if set) will automatically be imported and opened after the first activation of a\n   * scene imported from the module compendium.\n   * The name here corresponds to a Journal entry in your compendium and must match exactly (it is case\n   * sensitive).\n   * Set to the following to disable:\n   *   const welcomeJournal = '';\n   */\n  const welcomeJournal = 'Introduction';\n  /**\n   * additionalJournals will automatically be imported. This is a list of Journals by name that should\n   * also be imported.\n   * Set to the following to disable:\n   *   const additionalJournals = [];\n   */\n  const additionalJournals = ['Credits'];\n  /**\n   * additionalMacros will automatically be imported. Each name must match exactly and are case sensitive.\n   * Set to the following to disable:\n   *   const additionalMacros = [];\n   */\n  const additionalMacros = ['Example Macro'];\n  /**\n   * creaturePacks is a list of compendium packs to look in for Actors by name (in prioritised order).\n   * If the creature is not found in the first pack, it will search through each subsequent pack.\n   * The first entry here assumes that you have an Actor pack in your module with the \"name\" of \"actors\".\n   * The second entry here lists the DnD5e SRD Monsters compendium that comes with the DnD5e system. Feel\n   * free to delete the 'dnd5e.monsters' reference if you want, or swapping it to any other system compendium\n   * reference.\n   * Set to the following to disable:\n   *   const creaturePacks = [];\n   */\n  const creaturePacks = [`${moduleName}.actors`, 'dnd5e.monsters'];\n  /**\n   * journalPacks is a list of compendium packs to look in for Journals by name (in prioritised order).\n   * The first entry here assumes that you have a Journal pack in your module with the \"name\" of \"journals\".\n   * Set to the following to disable:\n   *   const journalPacks = [];\n   */\n  const journalPacks = [`${moduleName}.journals`];\n  /**\n   * macroPacks is a list of compendium packs to look in for Macros by name (in prioritised order).\n   * The first entry here assumes that you have a Macro pack in your module with the \"name\" of \"macros\".\n   * Set to the following to disable:\n   *   const macroPacks = [];\n   */\n  const macroPacks = [`${moduleName}.macros`];\n  /**\n   * playlistPacks is a list of compendium packs to look in for Playlists by name (in prioritised order).\n   * The first entry here assumes that you have a Playlist pack in your module with the \"name\" of \"playlists\".\n   * Set to the following to disable:\n   *   const playlistPacks = [];\n   */\n  const playlistPacks = [`${moduleName}.playlists`];<br />  /**\n   * additionalModulePacks is a list of modules whose compendium packs can be looked in for entities by name (in prioritised order).\n   * Enter just the \"name\" of the module/s you want to be considered.\n   * For example, if you wanted to allow the packs from\n   * the [Free Loot Tavern's Magic Item Vault]{@link https://foundryvtt.com/packages/free-loot-tavern-compendium}\n   * and [Dynamic Active Effects SRD]{@link https://foundryvtt.com/packages/Dynamic-Effects-SRD}<br />   * modules to be searchable:\n   *   const playlistPacks = ['free-loot-tavern-compendium', 'Dynamic-Effects-SRD'];\n   * Set to the following to disable:\n   *   const additionalModulePacks = [];\n   */\n  const additionalModulePacks = ['dnd5e'];\n\n  Hooks.once('scenePackerReady', ScenePacker =&gt; {\n    // Initialise the Scene Packer with your adventure name and module name\n    let packer = ScenePacker.Initialise({\n      adventureName,\n      moduleName,\n      creaturePacks,\n      journalPacks,\n      macroPacks,\n      playlistPacks,<br />      additionalModulePacks,\n      welcomeJournal,\n      additionalJournals,\n      additionalMacros,\n      allowImportPrompts: true, // Set to false if you don't want the initial popup\n    });\n  });\n})();</code></pre>","folder":null,"sort":0,"permission":{"default":0,"Ajg91HDqjNrrkzqL":3},"flags":{"core":{"sourceId":"JournalEntry.8xXIOgLTdW6BINJr"}}}
{"_id":"l4B4aob1n9tM2DJv","name":"Packing your Scenes","content":"<p style=\"box-sizing:border-box;user-select:text;color:#191813\">To pack your scene ready for distribution:</p>\n<ol style=\"box-sizing:border-box;user-select:text;color:#191813\">\n<li style=\"box-sizing:border-box;user-select:text\">Enable the <code style=\"box-sizing:border-box;user-select:text\">Scene Packer context menu</code> in Module Settings.</li>\n<li style=\"box-sizing:border-box;user-select:text\">Build your scene as normal, adding Actors and Journal Pins where you'd like.</li>\n<li style=\"box-sizing:border-box;user-select:text\">Export your Scenes/Actors/Journals/Roll Tables/Items/Macros/Playlists to your compendiums as normal.</li>\n<li style=\"box-sizing:border-box;user-select:text\">Run the script to @Compendium[scene-packer.macros.IeiuU5QSNgwJygTL]{Relink compendium journal entries} to fix up the journal compendium linking (see section below)</li>\n<li style=\"box-sizing:border-box;user-select:text\">Right click on your Scene in the Scenes Directory and choose \"Pack Scene Data\".</li>\n<li style=\"box-sizing:border-box;user-select:text\"><strong>Important step that is often missed:</strong> Export your Scene/s to your compendium again (replacing your existing entry, merging by name to retain the ID reference).</li>\n<li style=\"box-sizing:border-box;user-select:text\">Run the @Compendium[scene-packer.macros.mkNKay70v790Fu4h]{Show asset report} macro against your module to verify that all of your assets will work for your users when imported into their world.</li>\n</ol>\n<p style=\"box-sizing:border-box;user-select:text;color:#191813\"><img style=\"user-select:text\" src=\"https://github.com/League-of-Foundry-Developers/scene-packer/raw/main/scene-context-menu.png\" width=\"295\" height=\"446\" /></p>","folder":null,"sort":0,"permission":{"default":0,"XKmxUPdkcWMuKdfu":3},"flags":{"core":{"sourceId":"JournalEntry.fN4rFcgk779mLs5l"},"scene-packer":{"sourceId":"JournalEntry.fN4rFcgk779mLs5l"}}}
{"name":"Moulinette Integration","content":"<h3>Integration with <a href=\"https://www.moulinette.cloud/\" target=\"_blank\" rel=\"noopener\">Moulinette</a> was added in v2.4.0 of Scene Packer.</h3>\n<p>With this integration, your end-users don't need to install a new module every time you do a release and all of your carefully placed actors, journals and folder structures will just work.</p>\n<p>The video below guides you through the process of using Scene Packer with Moulinette:</p>\n<p> </p>\n<p><iframe title=\"YouTube video player\" src=\"https://www.youtube.com/embed/XZjuE1j_7GQ\" width=\"560\" height=\"315\"></iframe></p>","folder":null,"sort":0,"permission":{"default":0,"0r6mrq3YfoHRSSBu":3},"flags":{"scene-packer":{"hash":"13a0bb09962f384e662824b79f9172e2870996ce","sourceId":"JournalEntry.iCxvSgAvma8zSNj0"},"core":{"sourceId":"JournalEntry.iCxvSgAvma8zSNj0"}},"_id":"wKfAMThrphxfL8z7"}