var __defProp2=Object.defineProperty;var __name2=(target,value)=>__defProp2(target,"name",{value,configurable:!0});var __defProp=Object.defineProperty,__name=__name2((target,value)=>__defProp(target,"name",{value,configurable:!0}),"__name");const id="dfreds-effects-panel",RIGHT_CLICK_BEHAVIOR={DIALOG:"dialog",DELETE:"delete",DISABLE:"disable"},SECONDS={IN_ONE_ROUND:6,IN_ONE_MINUTE:60,IN_TWO_MINUTES:120,IN_ONE_HOUR:3600,IN_TWO_HOURS:7200,IN_ONE_DAY:86400,IN_TWO_DAYS:172800,IN_ONE_WEEK:604800,IN_TWO_WEEKS:1209600,IN_ONE_YEAR:31536e3,IN_TWO_YEARS:63072e3},USER_FLAGS={TOP_POSITION:"topPosition"};class Settings{static{__name2(this,"Settings")}static{__name(this,"Settings")}#PASSIVE_EFFECTS_RIGHT_CLICK_BEHAVIOR="passiveEffectsRightClickBehavior";#TEMPORARY_EFFECTS_RIGHT_CLICK_BEHAVIOR="temporaryEffectsRightClickBehavior";#SHOW_DISABLED_EFFECTS="showDisabledEffects";#SHOW_PASSIVE_EFFECTS="showPassiveEffects";#SHOW_DURATION_OVERLAYS="showDurationOverlays";#VIEW_PERMISSION="viewPermission";#VIEW_DETAILS_PERMISSION="viewDetailsPermission";registerSettings(){const userRoles={};userRoles[CONST.USER_ROLES.PLAYER]=game.i18n.localize("EffectsPanel.SettingPlayer"),userRoles[CONST.USER_ROLES.TRUSTED]=game.i18n.localize("EffectsPanel.SettingTrustedPlayer"),userRoles[CONST.USER_ROLES.ASSISTANT]=game.i18n.localize("EffectsPanel.SettingAssistantGM"),userRoles[CONST.USER_ROLES.GAMEMASTER]=game.i18n.localize("EffectsPanel.SettingGameMaster"),userRoles[5]=game.i18n.localize("EffectsPanel.SettingNone");const rightClickBehaviors={};rightClickBehaviors[RIGHT_CLICK_BEHAVIOR.DIALOG]=game.i18n.localize("EffectsPanel.SettingDialog"),rightClickBehaviors[RIGHT_CLICK_BEHAVIOR.DELETE]=game.i18n.localize("EffectsPanel.SettingDelete"),rightClickBehaviors[RIGHT_CLICK_BEHAVIOR.DISABLE]=game.i18n.localize("EffectsPanel.SettingDisable"),game.settings.register(id,this.#SHOW_DISABLED_EFFECTS,{name:"EffectsPanel.SettingShowDisabledEffects",hint:"EffectsPanel.SettingShowDisabledEffectsHint",scope:"client",config:!0,default:!0,type:Boolean,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#SHOW_PASSIVE_EFFECTS,{name:"EffectsPanel.SettingShowPassiveEffects",hint:"EffectsPanel.SettingShowPassiveEffectsHint",scope:"client",config:!0,default:!1,type:Boolean,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#SHOW_DURATION_OVERLAYS,{name:"EffectsPanel.SettingShowDurationOverlays",hint:"EffectsPanel.SettingShowDurationOverlaysHint",scope:"client",config:!0,default:!0,type:Boolean,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#PASSIVE_EFFECTS_RIGHT_CLICK_BEHAVIOR,{name:"EffectsPanel.SettingPassiveEffectsRightClickBehavior",hint:"EffectsPanel.SettingPassiveEffectsRightClickBehaviorHint",scope:"client",config:!0,default:RIGHT_CLICK_BEHAVIOR.DISABLE,choices:rightClickBehaviors,type:String,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#TEMPORARY_EFFECTS_RIGHT_CLICK_BEHAVIOR,{name:"EffectsPanel.SettingTemporaryEffectsRightClickBehavior",hint:"EffectsPanel.SettingTemporaryEffectsRightClickBehaviorHint",scope:"client",config:!0,default:RIGHT_CLICK_BEHAVIOR.DIALOG,choices:rightClickBehaviors,type:String,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#VIEW_PERMISSION,{name:"EffectsPanel.SettingViewPermission",hint:"EffectsPanel.SettingViewPermissionHint",scope:"world",config:!0,default:CONST.USER_ROLES.PLAYER,choices:userRoles,type:String,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")}),game.settings.register(id,this.#VIEW_DETAILS_PERMISSION,{name:"EffectsPanel.SettingViewDetailsPermission",hint:"EffectsPanel.SettingViewDetailsPermissionHint",scope:"world",config:!0,default:CONST.USER_ROLES.PLAYER,choices:userRoles,type:String,onChange:__name(()=>game.dfreds.effectsPanel.refresh(),"onChange")})}get passiveEffectsRightClickBehavior(){return game.settings.get(id,this.#PASSIVE_EFFECTS_RIGHT_CLICK_BEHAVIOR)}get temporaryEffectsRightClickBehavior(){return game.settings.get(id,this.#TEMPORARY_EFFECTS_RIGHT_CLICK_BEHAVIOR)}get showDisabledEffects(){return game.settings.get(id,this.#SHOW_DISABLED_EFFECTS)}get showPassiveEffects(){return game.settings.get(id,this.#SHOW_PASSIVE_EFFECTS)}get showDurationOverlays(){return game.settings.get(id,this.#SHOW_DURATION_OVERLAYS)}get viewPermission(){return parseInt(game.settings.get(id,this.#VIEW_PERMISSION))}get viewDetailsPermission(){return parseInt(game.settings.get(id,this.#VIEW_DETAILS_PERMISSION))}}class EffectsPanelController{static{__name2(this,"EffectsPanelController")}static{__name(this,"EffectsPanelController")}#viewMvc;#settings;constructor(viewMvc){this.#viewMvc=viewMvc,this.#settings=new Settings}async getData(){const temporaryEffects=[],passiveEffects=[],disabledTemporaryEffects=[],disabledPassiveEffects=[],effects=this.#actorEffects;for(const effect of effects)effect.description=await TextEditor.enrichHTML(effect.description),effect.disabled&&this.#settings.showDisabledEffects&&(effect.isTemporary?disabledTemporaryEffects.push(effect):disabledPassiveEffects.push(effect)),effect.disabled||(effect.isTemporary?temporaryEffects.push(effect):this.#settings.showPassiveEffects&&passiveEffects.push(effect));return{temporaryEffects,passiveEffects,disabledTemporaryEffects,disabledPassiveEffects,topStyle:this.#getTopStyle()}}get#actorEffects(){const actor=this.#actor;return actor?this.#getActorEffects(actor).map(effect=>{const src=this.#getSourceName(effect),effectData=effect.clone({},{keepId:!0});return effectData.remainingSeconds=this.#getSecondsRemaining(effectData.duration),effectData.turns=effectData.duration.turns,effectData.isExpired=effectData.remainingSeconds<=0,effectData.infinite=effectData.remainingSeconds===1/0,effectData.description=this.#getDescription(effect),effectData.isSupp=effect.isSuppressed,effectData.src=src,effectData}).sort((a,b)=>a.isTemporary?-1:b.isTemporary?1:0).filter(effectData=>!effectData.isSupp):[]}#getActorEffects(actor){const effects=[];for(const effect of actor?.allApplicableEffects()||[])effects.push(effect);return effects}#getDescription(effect){const effectDescription=effect.description,flagDescription=game.modules.get(id)?.active?effect.getFlag(id,"description"):"",legacyDescription=effect.flags.convenientDescription;return effectDescription||flagDescription||legacyDescription}#getSourceName(effect){if(!effect.origin)return null;try{const name=fromUuidSync(effect.origin)?.name;return name===void 0?null:name}catch{return null}}async onIconRightClick(event){if(event.currentTarget===null)return;const $target=$(event.currentTarget),actor=this.#actor,effect=this.#getActorEffects(actor).find(e=>e.id===$target.attr("data-effect-id"));effect&&(effect.isTemporary?await this.#handleEffectChange(effect,this.#settings.temporaryEffectsRightClickBehavior):await this.#handleEffectChange(effect,this.#settings.passiveEffectsRightClickBehavior))}async#handleEffectChange(effect,rightClickBehavior){if(rightClickBehavior===RIGHT_CLICK_BEHAVIOR.DIALOG){const content=game.i18n.format("EffectsPanel.DeleteOrDisableEffectContent",{effect:effect.name});await Dialog.wait({title:game.i18n.localize("EffectsPanel.DeleteOrDisableEffect"),content:`<h4>${content}?</h4>`,buttons:{delete:{icon:'<i class="fas fa-trash"></i>',label:game.i18n.localize("EffectsPanel.Delete"),callback:__name(async()=>{await effect.delete(),this.#viewMvc.refresh()},"callback")},disable:{icon:effect.disabled?'<i class="fas fa-check"></i>':'<i class="fas fa-close"></i>',label:effect.disabled?game.i18n.localize("EffectsPanel.Enable"):game.i18n.localize("EffectsPanel.Disable"),callback:__name(async()=>{await effect.update({disabled:!effect.disabled})},"callback")}}})}else rightClickBehavior===RIGHT_CLICK_BEHAVIOR.DELETE?(await effect.delete(),this.#viewMvc.refresh()):rightClickBehavior===RIGHT_CLICK_BEHAVIOR.DISABLE&&await effect.update({disabled:!effect.disabled})}onIconDoubleClick(event){if(event.currentTarget===null)return;const $target=$(event.currentTarget),actor=this.#actor,effect=this.#getActorEffects(actor).find(effect2=>effect2.id===$target.attr("data-effect-id"));effect&&effect.sheet.render(!0)}get#actor(){return canvas.tokens.controlled[0]?.actor??game.user?.character??null}#getSecondsRemaining(duration){return duration.seconds?(duration.startTime||0)+duration.seconds-game.time.worldTime:duration.rounds?(duration.rounds-(duration.startRound||0))*CONFIG.time.roundTime:1/0}onMouseDown(event){event.preventDefault();let isRightMB=!1;if("which"in event?isRightMB=event.which===3:"button"in event&&(isRightMB=event.button===2),isRightMB)return;const effectsPanel=document.getElementById("effects-panel");effectsPanel!==null&&dragElement(effectsPanel);function dragElement(element){let newYPosition=0,mouseYPosition=0,timer;element.onmousedown=dragMouseDown;function dragMouseDown(event2){event2=event2||window.event,event2.preventDefault(),mouseYPosition=event2.clientY,document.onmouseup=closeDragElement,timer=setTimeout(()=>{document.onmousemove=elementDrag},200)}__name2(dragMouseDown,"dragMouseDown"),__name(dragMouseDown,"dragMouseDown");function elementDrag(event2){event2.preventDefault(),newYPosition=mouseYPosition-event2.clientY,mouseYPosition=event2.clientY,element.style.top=element.offsetTop-newYPosition+"px"}__name2(elementDrag,"elementDrag"),__name(elementDrag,"elementDrag");function closeDragElement(){element.onmousedown=null,document.onmouseup=null,document.onmousemove=null,clearTimeout(timer);const topPosition=element.offsetTop-newYPosition;element.style.top=topPosition+"px",game.user.setFlag(id,USER_FLAGS.TOP_POSITION,topPosition)}__name2(closeDragElement,"closeDragElement"),__name(closeDragElement,"closeDragElement")}__name2(dragElement,"dragElement"),__name(dragElement,"dragElement")}#getTopStyle(){let topPosition=game.user.getFlag(id,USER_FLAGS.TOP_POSITION);return topPosition===void 0&&(topPosition=5,game.user.setFlag(id,USER_FLAGS.TOP_POSITION,topPosition)),`top: ${topPosition}px;`}}class EffectsPanelApp extends Application{static{__name2(this,"EffectsPanelApp")}static{__name(this,"EffectsPanelApp")}#controller;#rootView;refresh;constructor(){super(),this.#controller=new EffectsPanelController(this),this.#rootView=$("<div>"),this.refresh=foundry.utils.debounce(this.render.bind(this),100)}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"effects-panel",popOut:!1,template:"modules/dfreds-effects-panel/templates/effects-panel.hbs"})}async getData(_options){return await this.#controller.getData()}activateListeners(html){this.#rootView=html,this.#icons.on("contextmenu",this.#controller.onIconRightClick.bind(this.#controller)),this.#icons.on("dblclick",this.#controller.onIconDoubleClick.bind(this.#controller)),this.#dragHandler.on("mousedown",this.#controller.onMouseDown.bind(this.#controller))}updateFromRightPx(){this.element.animate({right:this.#fromRightPx})}async _render(force,options){await super._render(force,options),this.element.css("right",this.#fromRightPx)}get#icons(){return this.#rootView.find("div[data-effect-id]")}get#dragHandler(){return this.#rootView.find("#effects-panel-drag-handler")}get#fromRightPx(){const sidebarOuterWidth=ui.sidebar.element.outerWidth()||0;if(ui.webrtc.element.hasClass("camera-position-right")){const webrtcOuterWidth=ui.webrtc.element.outerWidth()||0;return`${sidebarOuterWidth+webrtcOuterWidth+18}px`}else return sidebarOuterWidth+18+"px"}}class HandlebarHelpers{static{__name2(this,"HandlebarHelpers")}static{__name(this,"HandlebarHelpers")}#settings=new Settings;registerHelpers(){this.#registerCanViewEffectDetailsHelper(),this.#registerCanViewEffectsPanelHelper(),this.#registerShowDurationOverlaysHelper(),this.#registerRemainingTimeLabelHelper()}#registerCanViewEffectDetailsHelper(){Handlebars.registerHelper("canViewEffectDetails",()=>game.user.role>=this.#settings.viewDetailsPermission)}#registerCanViewEffectsPanelHelper(){Handlebars.registerHelper("canViewEffectsPanel",()=>game.user.role>=this.#settings.viewPermission)}#registerShowDurationOverlaysHelper(){Handlebars.registerHelper("showDurationOverlays",()=>this.#settings.showDurationOverlays)}#handleDemonLordRemainingTime(effect,remainingSeconds){let tokenName;const specialDuration=foundry.utils.getProperty(effect,"flags.specialDuration");if(specialDuration!=="None"&&specialDuration!==void 0){switch(tokenName=fromUuidSync(effect.origin.substr(0,effect.origin.search(".Actor.")))?.name,specialDuration){case"TurnEndSource":remainingSeconds=game.i18n.localize("EffectsPanel.TurnEnd")+` [${tokenName}]`;break;case"TurnStartSource":remainingSeconds=game.i18n.localize("EffectsPanel.TurnStart")+` [${tokenName}]`;break;case"TurnEnd":remainingSeconds=game.i18n.localize("EffectsPanel.TurnEnd");break;case"TurnStart":remainingSeconds=game.i18n.localize("EffectsPanel.TurnStart");break;case"NextD20Roll":remainingSeconds=game.i18n.localize("EffectsPanel.NextD20Roll");break;case"NextDamageRoll":remainingSeconds=game.i18n.localize("EffectsPanel.NextDamageRoll");break;case"RestComplete":remainingSeconds=game.i18n.localize("EffectsPanel.RestComplete");break;default:remainingSeconds=specialDuration}return remainingSeconds}return null}#registerRemainingTimeLabelHelper(){Handlebars.registerHelper("remainingTimeLabel",(effect,_options)=>{const remainingSeconds=effect.remainingSeconds;if(game.system.id==="demonlord"){const dlResult=this.#handleDemonLordRemainingTime(effect,remainingSeconds);if(dlResult)return dlResult}return remainingSeconds===1/0&&effect.turns?effect.turns===1?game.i18n.localize("EffectsPanel.OneTurn"):game.i18n.format("EffectsPanel.ManyTurns",{turns:effect.turns}):remainingSeconds===1/0?game.i18n.localize("EffectsPanel.Unlimited"):remainingSeconds>=SECONDS.IN_TWO_YEARS?game.i18n.format("EffectsPanel.ManyYears",{years:Math.floor(remainingSeconds/SECONDS.IN_ONE_YEAR)}):remainingSeconds>=SECONDS.IN_ONE_YEAR?game.i18n.localize("EffectsPanel.OneYear"):remainingSeconds>=SECONDS.IN_TWO_WEEKS?game.i18n.format("EffectsPanel.ManyWeeks",{weeks:Math.floor(remainingSeconds/SECONDS.IN_ONE_WEEK)}):remainingSeconds>SECONDS.IN_ONE_WEEK?game.i18n.localize("EffectsPanel.OneWeek"):remainingSeconds>=SECONDS.IN_TWO_DAYS?game.i18n.format("EffectsPanel.ManyDays",{days:Math.floor(remainingSeconds/SECONDS.IN_ONE_DAY)}):remainingSeconds>SECONDS.IN_TWO_HOURS?game.i18n.format("EffectsPanel.ManyHours",{hours:Math.floor(remainingSeconds/SECONDS.IN_ONE_HOUR)}):remainingSeconds>SECONDS.IN_TWO_MINUTES?game.i18n.format("EffectsPanel.ManyMinutes",{minutes:Math.floor(remainingSeconds/SECONDS.IN_ONE_MINUTE)}):remainingSeconds>=2?game.i18n.format("EffectsPanel.ManySeconds",{seconds:remainingSeconds}):remainingSeconds===1?game.i18n.localize("EffectsPanel.OneSecond"):game.i18n.localize("EffectsPanel.Expired")})}}let libWrapper;const TGT_SPLIT_RE=new RegExp(`([^.[]+|\\[('([^'\\\\]|\\\\.)+?'|"([^"\\\\]|\\\\.)+?")\\])`,"g"),TGT_CLEANUP_RE=new RegExp(`(^\\['|'\\]$|^\\["|"\\]$)`,"g");Hooks.once("init",()=>{if(globalThis.libWrapper&&!(globalThis.libWrapper.is_fallback??!0)){libWrapper=globalThis.libWrapper;return}libWrapper=class{static{__name2(this,"libWrapper")}static{__name(this,"libWrapper")}static get is_fallback(){return!0}static get WRAPPER(){return"WRAPPER"}static get MIXED(){return"MIXED"}static get OVERRIDE(){return"OVERRIDE"}static register(package_id,target,fn,type="MIXED",{chain=void 0,bind=[]}={}){const is_setter=target.endsWith("#set");target=is_setter?target.slice(0,-4):target;const split=target.match(TGT_SPLIT_RE).map(x=>x.replace(/\\(.)/g,"$1").replace(TGT_CLEANUP_RE,"")),root_nm=split.splice(0,1)[0];let obj,fn_name;if(split.length==0)obj=globalThis,fn_name=root_nm;else{const _eval=eval;fn_name=split.pop(),obj=split.reduce((x,y)=>x[y],globalThis[root_nm]??_eval(root_nm))}let iObj=obj,descriptor=null;for(;iObj&&(descriptor=Object.getOwnPropertyDescriptor(iObj,fn_name),!descriptor);)iObj=Object.getPrototypeOf(iObj);if(!descriptor||descriptor?.configurable===!1)throw new Error(`libWrapper Shim: '${target}' does not exist, could not be found, or has a non-configurable descriptor.`);let original=null;const wrapper=chain??(type.toUpperCase?.()!="OVERRIDE"&&type!=3)?function(...args){return fn.call(this,original.bind(this),...bind,...args)}:function(...args){return fn.call(this,...bind,...args)};if(!is_setter)descriptor.value?(original=descriptor.value,descriptor.value=wrapper):(original=descriptor.get,descriptor.get=wrapper);else{if(!descriptor.set)throw new Error(`libWrapper Shim: '${target}' does not have a setter`);original=descriptor.set,descriptor.set=wrapper}descriptor.configurable=!0,Object.defineProperty(obj,fn_name,descriptor)}};{const[PACKAGE_ID,PACKAGE_TITLE]=(()=>{const match=(import.meta?.url??Error().stack)?.match(/\/(worlds|systems|modules)\/(.+)(?=\/)/i);if(match?.length!==3)return[null,null];const dirs=match[2].split("/");if(match[1]==="worlds")return dirs.find(n=>n&&game.world.id===n)?[game.world.id,game.world.title]:[null,null];if(match[1]==="systems")return dirs.find(n=>n&&game.system.id===n)?[game.system.id,game.system.title??game.system.data.title]:[null,null];const id2=dirs.find(n=>n&&game.modules.has(n)),mdl=game.modules.get(id2);return[id2,mdl?.title??mdl?.data?.title]})();if(!PACKAGE_ID||!PACKAGE_TITLE){console.error("libWrapper Shim: Could not auto-detect package ID and/or title. The libWrapper fallback warning dialog will be disabled.");return}Hooks.once("ready",()=>{const FALLBACK_MESSAGE_TITLE=PACKAGE_TITLE,FALLBACK_MESSAGE=`
				<p><b>'${PACKAGE_TITLE}' depends on the 'libWrapper' module, which is not present.</b></p>
				<p>A fallback implementation will be used, which increases the chance of compatibility issues with other modules.</p>
				<small><p>'libWrapper' is a library which provides package developers with a simple way to modify core Foundry VTT code, while reducing the likelihood of conflict with other packages.</p>
				<p>You can install it from the "Add-on Modules" tab in the <a href="javascript:game.shutDown()">Foundry VTT Setup</a>, from the <a href="https://foundryvtt.com/packages/lib-wrapper">Foundry VTT package repository</a>, or from <a href="https://github.com/ruipin/fvtt-lib-wrapper/">libWrapper's Github page</a>.</p></small>
			`,DONT_REMIND_AGAIN_KEY="libwrapper-dont-remind-again";console.warn(`${PACKAGE_TITLE}: libWrapper not present, using fallback implementation.`),game.settings.register(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,{name:"",default:!1,type:Boolean,scope:"world",config:!1}),game.user.isGM&&!game.settings.get(PACKAGE_ID,DONT_REMIND_AGAIN_KEY)&&new Dialog({title:FALLBACK_MESSAGE_TITLE,content:FALLBACK_MESSAGE,buttons:{ok:{icon:'<i class="fas fa-check"></i>',label:"Understood"},dont_remind:{icon:'<i class="fas fa-times"></i>',label:"Don't remind me again",callback:__name(()=>game.settings.set(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,!0),"callback")}}}).render(!0)})}}),Hooks.once("init",()=>{new Settings().registerSettings(),new HandlebarHelpers().registerHelpers(),game.dfreds=game.dfreds||{}}),Hooks.once("renderSidebar",()=>{game.dfreds.effectsPanel=new EffectsPanelApp,libWrapper.register(id,"Token.prototype._onControl",function(wrapper,...args){game.ready&&game.dfreds.effectsPanel.refresh(),wrapper(...args)},"WRAPPER"),libWrapper.register(id,"Token.prototype._onRelease",function(wrapper,...args){game.dfreds.effectsPanel.refresh(),wrapper(...args)},"WRAPPER"),libWrapper.register(id,"TokenDocument.prototype._onUpdate",function(wrapper,...args){wrapper(...args),game.dfreds.effectsPanel.refresh()},"WRAPPER"),libWrapper.register(id,"Actor.prototype.prepareData",function(wrapper,...args){wrapper(...args),canvas.ready&&game.user.character===this&&game.dfreds.effectsPanel.refresh()},"WRAPPER"),libWrapper.register(id,"User.prototype.prepareData",function(wrapper,...args){wrapper(...args),canvas.ready&&canvas.tokens.controlled.length>0&&game.dfreds.effectsPanel.refresh()},"WRAPPER")}),Hooks.on("collapseSidebar",()=>{game.dfreds.effectsPanel.updateFromRightPx()}),Hooks.on("rtcSettingsChanged",()=>{game.dfreds.effectsPanel.updateFromRightPx()}),Hooks.on("canvasReady",()=>{game.dfreds.effectsPanel.render(!0)}),Hooks.on("updateWorldTime",(_total,_diff)=>{game.dfreds.effectsPanel.refresh()}),Hooks.on("createActiveEffect",(_activeEffect,_config,_userId)=>{game.dfreds.effectsPanel.refresh()}),Hooks.on("updateActiveEffect",(_activeEffect,_config,_userId)=>{game.dfreds.effectsPanel.refresh()}),Hooks.on("deleteActiveEffect",(_activeEffect,_config,_userId)=>{game.dfreds.effectsPanel.refresh()});
