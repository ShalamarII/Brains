var __defProp2=Object.defineProperty;var __name2=(target,value)=>__defProp2(target,"name",{value,configurable:!0});var __defProp=Object.defineProperty,__name=__name2((target,value)=>__defProp(target,"name",{value,configurable:!0}),"__name");class Droppable{static{__name2(this,"Droppable")}static{__name(this,"Droppable")}event;data;constructor(event){this.event=event,this.data=this.retrieveData()}canHandleDrop(){return!1}}const id="dfreds-droppables";function log(data){console.log(typeof data=="string"?`${id} | ${data}`:data)}__name2(log,"log"),__name(log,"log");class Settings{static{__name2(this,"Settings")}static{__name(this,"Settings")}#FOLDER_DROP_STYLE="dropStyle";#ENABLE_CANVAS_DRAG_UPLOAD="enableCanvasDragUpload";#LAST_USED_FOLDER_DROP_STYLE="lastUsedDropStyle";registerSettings(){game.settings.register(id,this.#FOLDER_DROP_STYLE,{name:"Droppables.SettingDropStyle",hint:"Droppables.SettingDropStyleHint",scope:"client",config:!0,default:"dialog",choices:{dialog:"Droppables.SettingDropStyleDialog",stack:"Droppables.SettingDropStyleStack",random:"Droppables.SettingDropStyleRandom",horizontalLine:"Droppables.SettingDropStyleHorizontalLine",verticalLine:"Droppables.SettingDropStyleVerticalLine"},type:String}),game.settings.register(id,this.#ENABLE_CANVAS_DRAG_UPLOAD,{name:"Droppables.SettingEnableCanvasDragUpload",hint:"Droppables.SettingEnableCanvasDragUploadHint",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register(id,this.#LAST_USED_FOLDER_DROP_STYLE,{name:"Last Used Folder Drop Style",scope:"client",config:!1,default:"random",type:String})}get dropStyle(){return game.settings.get(id,this.#FOLDER_DROP_STYLE)}get canvasDragUpload(){return game.settings.get(id,this.#ENABLE_CANVAS_DRAG_UPLOAD)}get lastUsedDropStyle(){return game.settings.get(id,this.#LAST_USED_FOLDER_DROP_STYLE)}set lastUsedDropStyle(value){game.settings.set(id,this.#LAST_USED_FOLDER_DROP_STYLE,value)}}function translateToTopLeftGrid(event){const transform=canvas.tokens.worldTransform,tx=(event.clientX-transform.tx)/canvas.stage.scale.x,ty=(event.clientY-transform.ty)/canvas.stage.scale.y;return canvas.grid.getTopLeftPoint({x:tx,y:ty})}__name2(translateToTopLeftGrid,"translateToTopLeftGrid"),__name(translateToTopLeftGrid,"translateToTopLeftGrid");class DroppableFolders extends Droppable{static{__name2(this,"DroppableFolders")}static{__name(this,"DroppableFolders")}#settings=new Settings;constructor(event){super(event)}canHandleDrop(){return this.data.type==="Folder"}retrieveData(){const json=TextEditor.getDragEventData(this.event);return{type:json.type,uuid:json.uuid,x:json.x,y:json.y,elevation:json.elevation}}async handleDrop(){if(!this.canHandleDrop())return!1;this.event.preventDefault();const folder=await this.#getFolder();return folder?.type==="Actor"?(await this.#handleActorFolder(this.data,folder,this.event),!0):folder?.type==="JournalEntry"?(await this.#handleJournalFolder(folder,this.event),!0):!1}async#getFolder(){return fromUuid(this.data.uuid)}async#handleActorFolder(data,folder,event){const actors=folder?.contents,topLeft=translateToTopLeftGrid(event),xPosition=data.x??topLeft.x,yPosition=data.y??topLeft.y,elevation=data.elevation??0;if(!actors?.length)return;const dropStyle=this.#settings.dropStyle;log(`Dropping ${actors.length} onto the canvas via ${dropStyle}`),dropStyle==="dialog"?await this.#handleDialogChoice({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="stack"?await this.#dropStack({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="random"?await this.#dropRandom({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="horizontalLine"?await this.#dropLine({actors,xPosition,yPosition,elevation,isHidden:event.altKey,isHorizontal:!0}):dropStyle==="verticalLine"&&await this.#dropLine({actors,xPosition,yPosition,elevation,isHidden:event.altKey,isHorizontal:!1})}async#handleDialogChoice({actors,xPosition,yPosition,elevation,isHidden}){const content=await renderTemplate("modules/dfreds-droppables/templates/drop-dialog.hbs",{dropStyle:this.#settings.lastUsedDropStyle,startingElevation:elevation?Math.round(elevation):null});new Dialog({title:game.i18n.localize("Droppables.DropActorsFolder"),content,buttons:{yes:{icon:'<i class="fas fa-level-down-alt"></i>',label:game.i18n.localize("Droppables.DropButton"),callback:__name(async html=>{const dropStyle=html.find('select[name="drop-style"]').val(),dropElevation=parseFloat(html.find('input[name="elevation"]').val());this.#settings.lastUsedDropStyle=dropStyle,dropStyle==="stack"?await this.#dropStack({actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="random"?await this.#dropRandom({actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="horizontalLine"?await this.#dropLine({isHorizontal:!0,actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="verticalLine"&&await this.#dropLine({isHorizontal:!1,actors,xPosition,yPosition,isHidden,elevation:dropElevation})},"callback")}}},{width:320}).render(!0)}async#dropStack({actors,xPosition,yPosition,isHidden,elevation=void 0}){for(const actor of actors)await this.#dropActor({actor,xPosition,yPosition,isHidden,elevation})}async#dropRandom({actors,xPosition,yPosition,isHidden,elevation=void 0}){let distance=0,dropped=0,offsetX=0,offsetY=0;for(const actor of actors){const totalTries=Math.pow(1+distance*2,2)-Math.pow(distance*2-1,2),tries=Math.pow(1+distance*2,2)-dropped;await this.#dropActor({actor,xPosition:xPosition+offsetX,yPosition:yPosition+offsetY,isHidden,elevation}),totalTries-tries<totalTries/4?offsetX+=canvas.grid.sizeX:totalTries-tries<2*totalTries/4?offsetY+=canvas.grid.sizeY:totalTries-tries<3*totalTries/4?offsetX-=canvas.grid.sizeX:offsetY-=canvas.grid.sizeY,dropped+=1,dropped===Math.pow(1+distance*2,2)&&(distance+=1,offsetX=-1*distance*canvas.grid.sizeX,offsetY=-1*distance*canvas.grid.sizeY)}}async#dropLine({isHorizontal,actors,xPosition,yPosition,isHidden,elevation=void 0}){const step=isHorizontal?canvas.grid.sizeX:canvas.grid.sizeY;let offsetX=0,offsetY=0;for(const actor of actors){const width=getProperty(actor,"prototypeToken.width")||1,height=getProperty(actor,"prototypeToken.height")||1;await this.#dropActor({actor,xPosition:xPosition+offsetX,yPosition:yPosition+offsetY,isHidden,elevation}),isHorizontal?offsetX+=width*step:offsetY+=height*step}}async#dropActor({actor,xPosition,yPosition,isHidden,elevation}){const tokenDocument=await actor.getTokenDocument({x:xPosition,y:yPosition,hidden:isHidden,elevation:Number.isNaN(elevation)?0:elevation}),token=new CONFIG.Token.documentClass(tokenDocument);return TokenDocument.create(token.toObject(),{parent:canvas.scene})}async#handleJournalFolder(folder,event){const entries=folder?.contents,topLeft=translateToTopLeftGrid(event);Dialog.confirm({title:game.i18n.localize("Droppables.DropJournalFolder"),content:`<p>${game.i18n.format("Droppables.DropJournalFolderExplanation",{folderName:folder?.name??""})}</p>`,yes:__name(async()=>{for(const entry of entries)await this.#dropJournalEntry({entry,xPosition:topLeft.x,yPosition:topLeft.y})},"yes")})}async#dropJournalEntry({entry,xPosition,yPosition}){return NoteDocument.create({entryId:entry.id,x:xPosition,y:yPosition},{parent:canvas.scene})}}let libWrapper;const TGT_SPLIT_RE=new RegExp(`([^.[]+|\\[('([^'\\\\]|\\\\.)+?'|"([^"\\\\]|\\\\.)+?")\\])`,"g"),TGT_CLEANUP_RE=new RegExp(`(^\\['|'\\]$|^\\["|"\\]$)`,"g");Hooks.once("init",()=>{if(globalThis.libWrapper&&!(globalThis.libWrapper.is_fallback??!0)){libWrapper=globalThis.libWrapper;return}libWrapper=class{static{__name2(this,"libWrapper")}static{__name(this,"libWrapper")}static get is_fallback(){return!0}static get WRAPPER(){return"WRAPPER"}static get MIXED(){return"MIXED"}static get OVERRIDE(){return"OVERRIDE"}static register(package_id,target,fn,type="MIXED",{chain=void 0,bind=[]}={}){const is_setter=target.endsWith("#set");target=is_setter?target.slice(0,-4):target;const split=target.match(TGT_SPLIT_RE).map(x=>x.replace(/\\(.)/g,"$1").replace(TGT_CLEANUP_RE,"")),root_nm=split.splice(0,1)[0];let obj,fn_name;if(split.length==0)obj=globalThis,fn_name=root_nm;else{const _eval=eval;fn_name=split.pop(),obj=split.reduce((x,y)=>x[y],globalThis[root_nm]??_eval(root_nm))}let iObj=obj,descriptor=null;for(;iObj&&(descriptor=Object.getOwnPropertyDescriptor(iObj,fn_name),!descriptor);)iObj=Object.getPrototypeOf(iObj);if(!descriptor||descriptor?.configurable===!1)throw new Error(`libWrapper Shim: '${target}' does not exist, could not be found, or has a non-configurable descriptor.`);let original=null;const wrapper=chain??(type.toUpperCase?.()!="OVERRIDE"&&type!=3)?function(...args){return fn.call(this,original.bind(this),...bind,...args)}:function(...args){return fn.call(this,...bind,...args)};if(!is_setter)descriptor.value?(original=descriptor.value,descriptor.value=wrapper):(original=descriptor.get,descriptor.get=wrapper);else{if(!descriptor.set)throw new Error(`libWrapper Shim: '${target}' does not have a setter`);original=descriptor.set,descriptor.set=wrapper}descriptor.configurable=!0,Object.defineProperty(obj,fn_name,descriptor)}};{const[PACKAGE_ID,PACKAGE_TITLE]=(()=>{const match=(import.meta?.url??Error().stack)?.match(/\/(worlds|systems|modules)\/(.+)(?=\/)/i);if(match?.length!==3)return[null,null];const dirs=match[2].split("/");if(match[1]==="worlds")return dirs.find(n=>n&&game.world.id===n)?[game.world.id,game.world.title]:[null,null];if(match[1]==="systems")return dirs.find(n=>n&&game.system.id===n)?[game.system.id,game.system.title??game.system.data.title]:[null,null];const id2=dirs.find(n=>n&&game.modules.has(n)),mdl=game.modules.get(id2);return[id2,mdl?.title??mdl?.data?.title]})();if(!PACKAGE_ID||!PACKAGE_TITLE){console.error("libWrapper Shim: Could not auto-detect package ID and/or title. The libWrapper fallback warning dialog will be disabled.");return}Hooks.once("ready",()=>{const FALLBACK_MESSAGE_TITLE=PACKAGE_TITLE,FALLBACK_MESSAGE=`
				<p><b>'${PACKAGE_TITLE}' depends on the 'libWrapper' module, which is not present.</b></p>
				<p>A fallback implementation will be used, which increases the chance of compatibility issues with other modules.</p>
				<small><p>'libWrapper' is a library which provides package developers with a simple way to modify core Foundry VTT code, while reducing the likelihood of conflict with other packages.</p>
				<p>You can install it from the "Add-on Modules" tab in the <a href="javascript:game.shutDown()">Foundry VTT Setup</a>, from the <a href="https://foundryvtt.com/packages/lib-wrapper">Foundry VTT package repository</a>, or from <a href="https://github.com/ruipin/fvtt-lib-wrapper/">libWrapper's Github page</a>.</p></small>
			`,DONT_REMIND_AGAIN_KEY="libwrapper-dont-remind-again";console.warn(`${PACKAGE_TITLE}: libWrapper not present, using fallback implementation.`),game.settings.register(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,{name:"",default:!1,type:Boolean,scope:"world",config:!1}),game.user.isGM&&!game.settings.get(PACKAGE_ID,DONT_REMIND_AGAIN_KEY)&&new Dialog({title:FALLBACK_MESSAGE_TITLE,content:FALLBACK_MESSAGE,buttons:{ok:{icon:'<i class="fas fa-check"></i>',label:"Understood"},dont_remind:{icon:'<i class="fas fa-times"></i>',label:"Don't remind me again",callback:__name(()=>game.settings.set(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,!0),"callback")}}}).render(!0)})}});class DroppableTokensOnCanvas extends Droppable{static{__name2(this,"DroppableTokensOnCanvas")}static{__name(this,"DroppableTokensOnCanvas")}#settings=new Settings;constructor(event){super(event)}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!(canvas.activeLayer?.name?.includes("TokenLayer")??!1))return!1;const isAllowedToUpload=game.user.hasPermission(CONST.USER_PERMISSIONS.FILES_UPLOAD);if(!isGM&&!isAllowedToUpload)return ui.notifications.warn("You do not have permission to upload files."),!1;const canCreateTokens=game.user.hasPermission(CONST.USER_PERMISSIONS.TOKEN_CREATE);if(!isGM&&!canCreateTokens)return ui.notifications.warn("You do not have permission to create tokens."),!1;const canCreateActors=game.user.hasPermission(CONST.USER_PERMISSIONS.ACTOR_CREATE);return!isGM&&!canCreateActors?(ui.notifications.warn("You do not have permission to create actors."),!1):!(!(this.data.files.length>0)||!!this.data.url)}retrieveData(){const files=this.event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")),url:this.event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.event.preventDefault();const types=game.documentTypes.Actor.filter(type=>type!==CONST.BASE_DOCUMENT_TYPE),typeLocalizations=types.reduce((obj,typeLabel)=>{const label=CONFIG.Actor.typeLabels[typeLabel]??typeLabel;return obj[typeLabel]=game.i18n.has(label)?game.i18n.localize(label):typeLabel,obj},{}),uploadedData=await this.#uploadData({typeLocalizations,selectedType:types[0]});return await this.#promptForActorTypes(uploadedData),!0}async#uploadData({typeLocalizations,selectedType}){const uploadedData=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(id,"tokens",file);uploadedData.push({response,types:typeLocalizations,selectedType,fileName:file.name})}return uploadedData}async#promptForActorTypes(uploadedData){const content=await renderTemplate(`modules/${id}/templates/drop-token-files-dialog.hbs`,{uploadedData});return Dialog.prompt({title:game.i18n.localize("Droppables.TokenActorTypes"),content,label:game.i18n.localize("Droppables.Confirm"),rejectClose:!1,callback:__name(async html=>{const tokenDropDatas=html.find('select[name="type"]').map((_idx,ele)=>{const data=$(ele).data(),typeSelection=$(ele).val();return{fileName:data?.fileName??"Unknown",filePath:data?.filePath,type:typeSelection?.toString()??CONST.BASE_DOCUMENT_TYPE}}).get();await this.#createActorsAndTokens(tokenDropDatas)},"callback")})}async#createActorsAndTokens(tokenDropDatas){const actorSources=[];for(const tokenDropData of tokenDropDatas){const actorSource={name:tokenDropData.fileName.split(".")[0],type:tokenDropData.type,img:tokenDropData.filePath};actorSources.push(actorSource)}const createdActors=await Actor.createDocuments(actorSources),tokenSources=[];for(const actor of createdActors){const topLeft=translateToTopLeftGrid(this.event),tokenSource={texture:{src:actor.img},hidden:this.event.altKey,x:topLeft.x,y:topLeft.y,actorId:actor.id,actorLink:!1};tokenSources.push(tokenSource),await actor.update({prototypeToken:tokenSource})}return canvas.scene?.createEmbeddedDocuments("Token",tokenSources,{broadcast:!0,data:[]})}}class DroppableTilesOnCanvas extends Droppable{static{__name2(this,"DroppableTilesOnCanvas")}static{__name(this,"DroppableTilesOnCanvas")}#settings=new Settings;constructor(event){super(event)}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!(canvas.activeLayer?.name?.includes("TilesLayer")??!1))return!1;const isAllowedToUpload=game.user.hasPermission(CONST.USER_PERMISSIONS.FILES_UPLOAD);return!isGM&&!isAllowedToUpload?(ui.notifications.warn("You do not have permission to upload files."),!1):!(!(this.data.files.length>0)||!!this.data.url)}retrieveData(){const files=this.event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")||file.type.includes("video")),url:this.event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.event.preventDefault();const overhead=ui.controls.controls.find(control=>control.name==="tiles")?.tools.find(tool=>tool.name==="foreground")?.active??!1,tileSources=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(id,"tiles",file),topLeft=translateToTopLeftGrid(this.event),texture=await loadTexture(response.path),tileSource={texture:{src:response.path},width:texture?.baseTexture.width,height:texture?.baseTexture.height,overhead,hidden:this.event.altKey,x:topLeft.x,y:topLeft.y};tileSources.push(tileSource)}return canvas.perception.update({refreshLighting:!0,refreshTiles:!0}),await canvas.scene?.createEmbeddedDocuments("Tile",tileSources,{broadcast:!0,data:[]}),!0}}class DroppableSoundsOnCanvas extends Droppable{static{__name2(this,"DroppableSoundsOnCanvas")}static{__name(this,"DroppableSoundsOnCanvas")}#settings=new Settings;constructor(event){super(event)}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!(canvas.activeLayer?.name?.includes("SoundsLayer")??!1))return!1;const isAllowedToUpload=game.user.hasPermission(CONST.USER_PERMISSIONS.FILES_UPLOAD);return!isGM&&!isAllowedToUpload?(ui.notifications.warn("You do not have permission to upload files."),!1):!(!(this.data.files.length>0)||!!this.data.url)}retrieveData(){const files=this.event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("audio")),url:this.event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.event.preventDefault();const ambientSoundSources=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(id,"sounds",file),topLeft=translateToTopLeftGrid(this.event),ambientSoundSource={path:response.path,x:topLeft.x,y:topLeft.y,radius:10,easing:!0,repeat:!0,volume:1};ambientSoundSources.push(ambientSoundSource)}return await canvas.scene?.createEmbeddedDocuments("AmbientSound",ambientSoundSources),!0}}class DroppableNotesOnCanvas extends Droppable{static{__name2(this,"DroppableNotesOnCanvas")}static{__name(this,"DroppableNotesOnCanvas")}#settings=new Settings;constructor(event){super(event)}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!(canvas.activeLayer?.name?.includes("NotesLayer")??!1))return!1;const isAllowedToUpload=game.user.hasPermission(CONST.USER_PERMISSIONS.FILES_UPLOAD);if(!isGM&&!isAllowedToUpload)return ui.notifications.warn("You do not have permission to upload files."),!1;const canCreateJournals=game.user.hasPermission(CONST.USER_PERMISSIONS.JOURNAL_CREATE);if(!isGM&&!canCreateJournals)return ui.notifications.warn("You do not have permission to create journals."),!1;const canCreateNotes=game.user.hasPermission(CONST.USER_PERMISSIONS.NOTE_CREATE);return!isGM&&!canCreateNotes?(ui.notifications.warn("You do not have permission to create notes."),!1):!(!(this.data.files.length>0)||!!this.data.url)}retrieveData(){const files=this.event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")||file.type.includes("pdf")||file.type.includes("video")||file.type.includes("text")),url:this.event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.event.preventDefault();const uploadedData=await this.#uploadData();return await this.#createJournalAndNotes(uploadedData),!0}async#uploadData(){const uploadedData=[];for(const file of this.data.files){const type=this.#determineFileType(file);if(type==="text"){const text=await new Promise(resolve=>{const reader=new FileReader;reader.addEventListener("load",async()=>{resolve(reader.result?.toString())}),reader.readAsText(file)});uploadedData.push({text,type,fileName:file.name})}else{const response=await FilePicker.uploadPersistent(id,"journals",file);uploadedData.push({response,type,fileName:file.name})}}return uploadedData}#determineFileType(file){let type="image";return file.type.includes("pdf")?type="pdf":file.type.includes("video")?type="video":file.type.includes("text")&&(type="text"),type}async#createJournalAndNotes(uploadedData){const journalPageSources=uploadedData.map(data=>({name:data.fileName,type:data.type,src:data.response?.path,text:{content:data.text}})),journalSource={name:canvas.scene?.name,pages:journalPageSources},journal=await JournalEntry.create(journalSource),topLeft=translateToTopLeftGrid(this.event),noteSource={entryId:journal?.id,x:topLeft.x,y:topLeft.y};await canvas.scene?.createEmbeddedDocuments("Note",[noteSource])}}Hooks.once("init",async()=>{new Settings().registerSettings()}),Hooks.once("setup",async()=>{libWrapper.register(id,"Canvas.prototype._onDrop",async function(wrapped,event){const droppables=[new DroppableFolders(event),new DroppableTokensOnCanvas(event),new DroppableTilesOnCanvas(event),new DroppableSoundsOnCanvas(event),new DroppableNotesOnCanvas(event)];let didDrop=!1;for(const droppable of droppables)if(didDrop=await droppable.handleDrop(),didDrop)break;didDrop||wrapped(event)})}),Hooks.on("3DCanvasConfig",config=>{config.INTERACTIONS.dropFunctions.Folder=async function(event,data){canvas.tokens.activate();const droppableFolders=new DroppableFolders(event);droppableFolders.data=data,await droppableFolders.handleDrop()}});
