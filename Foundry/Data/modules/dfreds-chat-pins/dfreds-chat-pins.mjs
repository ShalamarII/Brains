var __defProp2=Object.defineProperty;var __name2=(target,value)=>__defProp2(target,"name",{value,configurable:!0});var __defProp=Object.defineProperty,__name=__name2((target,value)=>__defProp(target,"name",{value,configurable:!0}),"__name");const id="dfreds-chat-pins";let libWrapper;const TGT_SPLIT_RE=new RegExp(`([^.[]+|\\[('([^'\\\\]|\\\\.)+?'|"([^"\\\\]|\\\\.)+?")\\])`,"g"),TGT_CLEANUP_RE=new RegExp(`(^\\['|'\\]$|^\\["|"\\]$)`,"g");Hooks.once("init",()=>{if(globalThis.libWrapper&&!(globalThis.libWrapper.is_fallback??!0)){libWrapper=globalThis.libWrapper;return}libWrapper=class{static{__name2(this,"libWrapper")}static{__name(this,"libWrapper")}static get is_fallback(){return!0}static get WRAPPER(){return"WRAPPER"}static get MIXED(){return"MIXED"}static get OVERRIDE(){return"OVERRIDE"}static register(package_id,target,fn,type="MIXED",{chain=void 0,bind=[]}={}){const is_setter=target.endsWith("#set");target=is_setter?target.slice(0,-4):target;const split=target.match(TGT_SPLIT_RE).map(x=>x.replace(/\\(.)/g,"$1").replace(TGT_CLEANUP_RE,"")),root_nm=split.splice(0,1)[0];let obj,fn_name;if(split.length==0)obj=globalThis,fn_name=root_nm;else{const _eval=eval;fn_name=split.pop(),obj=split.reduce((x,y)=>x[y],globalThis[root_nm]??_eval(root_nm))}let iObj=obj,descriptor=null;for(;iObj&&(descriptor=Object.getOwnPropertyDescriptor(iObj,fn_name),!descriptor);)iObj=Object.getPrototypeOf(iObj);if(!descriptor||descriptor?.configurable===!1)throw new Error(`libWrapper Shim: '${target}' does not exist, could not be found, or has a non-configurable descriptor.`);let original=null;const wrapper=chain??(type.toUpperCase?.()!="OVERRIDE"&&type!=3)?function(...args){return fn.call(this,original.bind(this),...bind,...args)}:function(...args){return fn.call(this,...bind,...args)};if(!is_setter)descriptor.value?(original=descriptor.value,descriptor.value=wrapper):(original=descriptor.get,descriptor.get=wrapper);else{if(!descriptor.set)throw new Error(`libWrapper Shim: '${target}' does not have a setter`);original=descriptor.set,descriptor.set=wrapper}descriptor.configurable=!0,Object.defineProperty(obj,fn_name,descriptor)}};{const[PACKAGE_ID,PACKAGE_TITLE]=(()=>{const match=(import.meta?.url??Error().stack)?.match(/\/(worlds|systems|modules)\/(.+)(?=\/)/i);if(match?.length!==3)return[null,null];const dirs=match[2].split("/");if(match[1]==="worlds")return dirs.find(n=>n&&game.world.id===n)?[game.world.id,game.world.title]:[null,null];if(match[1]==="systems")return dirs.find(n=>n&&game.system.id===n)?[game.system.id,game.system.title??game.system.data.title]:[null,null];const id2=dirs.find(n=>n&&game.modules.has(n)),mdl=game.modules.get(id2);return[id2,mdl?.title??mdl?.data?.title]})();if(!PACKAGE_ID||!PACKAGE_TITLE){console.error("libWrapper Shim: Could not auto-detect package ID and/or title. The libWrapper fallback warning dialog will be disabled.");return}Hooks.once("ready",()=>{const FALLBACK_MESSAGE_TITLE=PACKAGE_TITLE,FALLBACK_MESSAGE=`
				<p><b>'${PACKAGE_TITLE}' depends on the 'libWrapper' module, which is not present.</b></p>
				<p>A fallback implementation will be used, which increases the chance of compatibility issues with other modules.</p>
				<small><p>'libWrapper' is a library which provides package developers with a simple way to modify core Foundry VTT code, while reducing the likelihood of conflict with other packages.</p>
				<p>You can install it from the "Add-on Modules" tab in the <a href="javascript:game.shutDown()">Foundry VTT Setup</a>, from the <a href="https://foundryvtt.com/packages/lib-wrapper">Foundry VTT package repository</a>, or from <a href="https://github.com/ruipin/fvtt-lib-wrapper/">libWrapper's Github page</a>.</p></small>
			`,DONT_REMIND_AGAIN_KEY="libwrapper-dont-remind-again";console.warn(`${PACKAGE_TITLE}: libWrapper not present, using fallback implementation.`),game.settings.register(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,{name:"",default:!1,type:Boolean,scope:"world",config:!1}),game.user.isGM&&!game.settings.get(PACKAGE_ID,DONT_REMIND_AGAIN_KEY)&&new Dialog({title:FALLBACK_MESSAGE_TITLE,content:FALLBACK_MESSAGE,buttons:{ok:{icon:'<i class="fas fa-check"></i>',label:"Understood"},dont_remind:{icon:'<i class="fas fa-times"></i>',label:"Don't remind me again",callback:__name(()=>game.settings.set(PACKAGE_ID,DONT_REMIND_AGAIN_KEY,!0),"callback")}}}).render(!0)})}});class ChatPinsLog extends Application{static{__name2(this,"ChatPinsLog")}static{__name(this,"ChatPinsLog")}#lastId;#chatPins;#isAtBottom=!0;#renderingQueue=new foundry.utils.Semaphore(1);#renderingBatch=!1;constructor(options){super(options),this.#lastId=null,this.#chatPins=new ChatPins,setInterval(this.updateTimestamps.bind(this),1e3*15)}get isAtBottom(){return this.#isAtBottom}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"chat-pins",template:"modules/dfreds-chat-pins/templates/chat-pins-app.html",title:"ChatPins.AppName",popOut:!0,width:300,height:600,top:400,left:1300,minimizable:!0,resizable:!0,stream:!1,scrollY:["#chat-log"]})}get collection(){const pinnedMessages=game.messages.filter(message=>this.#chatPins.isPinned(message)).map(message=>({_id:message._id,type:message.type,system:message.system,style:message.style,author:message?.author?.id,timestamp:message.timestamp,flavor:message.flavor,content:message.content,speaker:message.speaker,whisper:message.whisper,blind:message.blind,rolls:message.rolls.map(roll=>JSON.stringify(roll)),sound:message.sound,emote:message.emote,flags:message.flags,_stats:message._stats}));return new Messages(pinnedMessages)}async _render(force,options){if(!this.rendered)return await super._render(force,options),this.scrollBottom({waitImages:!0})}async _renderInner(data,options){const html=await super._renderInner(data,options);return await this.#renderBatch(html,CONFIG.ChatMessage.batchSize),html}async#renderBatch(html,size){if(!this.#renderingBatch)return this.#renderingBatch=!0,this.#renderingQueue.add(async()=>{const messages=this.collection.contents,log=html.find("#chat-log, #chat-log-popout");let lastIdx=messages.findIndex(m2=>m2.id===this.#lastId);lastIdx=lastIdx!==-1?lastIdx:messages.length;const targetIdx=Math.max(lastIdx-size,0);let m=null;if(lastIdx!==0){const html2=[];for(let i=targetIdx;i<lastIdx;i++)if(m=messages[i],!!m.visible){m.logged=!0;try{html2.push(await m.getHTML())}catch(err){err.message=`Chat message ${m.id} failed to render: ${err})`,console.error(err)}}log.prepend(html2),this.#lastId=messages[targetIdx].id,this.#renderingBatch=!1}})}deleteMessage(messageId){return this.#renderingQueue.add(async()=>{const message=game.messages.get(messageId,{strict:!1});message&&(message.logged=!1);const li=this.element.find(`.message[data-message-id="${messageId}"]`);if(li.length){if(messageId===this.#lastId){const next=li[0].nextElementSibling;this.#lastId=next?next.dataset.messageId:null}li.slideUp(100,()=>li.remove())}})}async postOne(message,options={}){if(message.visible)return this.#renderingQueue.add(async()=>{message.logged=!0,this.#lastId||(this.#lastId=message.id);const html=await message.getHTML(),log=this.element.find("#chat-log"),existing=options.before?this.element.find(`.message[data-message-id="${options.before}"]`):null;existing?.length?existing.before(html):(log.append(html),(this.isAtBottom||message?.author?._id===game.user._id)&&this.scrollBottom({waitImages:!0}))})}async scrollBottom(options={popout:!1,waitImages:!1,scrollOptions:{}}){if(!this.rendered)return;options.waitImages&&await this.#waitForImages(),this.element[0].querySelector("#chat-log")?.lastElementChild?.scrollIntoView(options.scrollOptions)}async updateMessage(message){const li=this.element.find(`.message[data-message-id="${message.id}"]`);if(li.length){const html=await message.getHTML();li.replaceWith(html)}else{const messages=game.messages.contents,messageIndex=messages.findIndex(m=>m===message);let nextMessage;for(let i=messageIndex+1;i<messages.length;i++)if(messages[i].visible){nextMessage=messages[i];break}await this.postOne(message,{before:nextMessage?.id})}}updateTimestamps(){const messages=this.element.find("#chat-log .message");for(const li of messages){const message=game.messages.get(li.dataset.messageId??"");if(!message?.timestamp)return;const stamp=li.querySelector(".message-timestamp");stamp&&(stamp.textContent=foundry.utils.timeSince(message.timestamp))}}activateListeners(html){html.find("#chat-pins").scroll(this.#onScrollLog.bind(this)),html.on("click","a.message-delete",this.#onDeleteMessage.bind(this)),html.find(".jump-to-bottom > a").click(()=>this.scrollBottom()),this.#contextMenu(html)}#contextMenu(html){ContextMenu.create(this,html,".message",this.#getEntryContextOptions())}#getEntryContextOptions(){return[{name:"ChatPins.JumpToPin",icon:'<i class="fas fa-bullseye"></i>',condition:__name(()=>!0,"condition"),callback:__name(li=>{const messageId=li.data("messageId");$(`#chat-log .chat-message[data-message-id="${messageId}"]`)?.get(0)?.scrollIntoView({behavior:"smooth"})},"callback")},{name:"ChatPins.UnpinMessage",icon:'<i class="fas fa-thumbtack"></i>',condition:__name(li=>{const message=game.messages.get(li.data("messageId"));return message?game.user.isGM&&this.#chatPins.isPinned(message):!1},"condition"),callback:__name(async li=>{const message=game.messages.get(li.data("messageId"));message&&(await this.#chatPins.unpin(message),await this._renderInner({},{}))},"callback")},...ChatLog.prototype._getEntryContextOptions()]}#onDeleteMessage(event){event.preventDefault();const messageId=event.currentTarget?.closest(".message")?.dataset?.messageId,message=game.messages.get(messageId??"");return message?message.delete():this.deleteMessage(messageId??"")}async#onScrollLog(event){if(!this.rendered)return;const log=event.target,pct=log.scrollTop/(log.scrollHeight-log.clientHeight);if(this.#isAtBottom=pct>.99,pct<.01)return this.#renderBatch(this.element,CONFIG.ChatMessage.batchSize)}#waitForImages(){return new Promise(resolve=>{let loaded=0;const images=Array.from(this.element.find("img")).filter(img=>!img.complete);images.length||resolve(null);for(const img of images)img.onload=img.onerror=()=>{loaded+=1,img.onload=img.onerror=null,loaded>=images.length&&resolve(null)}})}}class ChatPins{static{__name2(this,"ChatPins")}static{__name(this,"ChatPins")}#FLAG="pinned";addPinButton(chatHtml){const pinButton=$(`<a class="chat-pins" title="${game.i18n.localize("ChatPins.ChatPins")}"><i class="fas fa-thumbtack"></i></a>`);pinButton.click(async()=>{new ChatPinsLog().render(!0)});let flex="0 0 72px";game.user.role<CONST.USER_ROLES.ASSISTANT&&(chatHtml.find("#chat-controls").append('<div class="control-buttons" style="flex: 0 0 24px;"></div>'),flex="0 0 24px");const controlButtons=chatHtml.find("#chat-controls .control-buttons");controlButtons.css("flex",flex),controlButtons.prepend(pinButton)}isPinned(message){return message.getFlag(id,this.#FLAG)!==void 0}pin(message){return message.setFlag(id,this.#FLAG,game.user.id)}unpin(message){return message.unsetFlag(id,this.#FLAG)}pinner(message){const pinnerId=message.getFlag(id,this.#FLAG);return game.users.get(pinnerId)?.name??game.i18n.localize("ChatPins.Unknown")}deleteAllExceptPins(){return Dialog.confirm({title:game.i18n.localize("CHAT.FlushTitle"),content:`
            <h4>${game.i18n.localize("AreYouSure")}</h4>
            <p>${game.i18n.localize("CHAT.FlushWarning")}</p>
            <p>${game.i18n.localize("ChatPins.DeleteAllNote")}</p>`,yes:__name(async()=>{const notPinnedIds=game.messages.filter(message=>!message.getFlag("dfreds-chat-pins","pinned")).map(message=>message.id);await ChatMessage.deleteDocuments(notPinnedIds)},"yes"),options:{top:window.innerHeight-175,left:window.innerWidth-720}})}}function findChatPinsLogApp(){const chatPinsLog=Object.values(ui.windows).find(app=>app.options.id==="chat-pins");if(chatPinsLog)return chatPinsLog}__name2(findChatPinsLogApp,"findChatPinsLogApp"),__name(findChatPinsLogApp,"findChatPinsLogApp"),Hooks.once("ready",()=>{libWrapper.register(id,"Messages.prototype.flush",function(_wrapper,..._args){new ChatPins().deleteAllExceptPins()},"OVERRIDE")}),Hooks.on("renderChatLog",(_chatLogApp,$html,_data)=>{new ChatPins().addPinButton($html)}),Hooks.on("renderChatMessage",(message,$html,_data)=>{const chatPins=new ChatPins;if(chatPins.isPinned(message)){const pinnedBy=game.i18n.format("ChatPins.PinnedBy",{pinner:chatPins.pinner(message)}),pinnedByHtml=$(`<p>${pinnedBy}</p>`);$html.css("border","2px solid #ff6400");const messageHeader=$html.find(".message-header");pinnedByHtml.insertAfter(messageHeader)}else $html.css("border","")}),Hooks.on("updateChatMessage",(m,_update,_data)=>{const message=m,chatPins=new ChatPins,app=findChatPinsLogApp();app&&(!message.visible||!chatPins.isPinned(message)?app?.deleteMessage(message.id):app?.updateMessage(message))}),Hooks.on("deleteChatMessage",(m,_data,_userId)=>{const message=m,app=findChatPinsLogApp();app&&app.deleteMessage(message.id)}),Hooks.on("getChatLogEntryContext",(_chatLogApp,entries)=>{const chatPins=new ChatPins;entries.unshift({name:"ChatPins.PinMessage",icon:'<i class="fas fa-thumbtack"></i>',condition:__name(li=>{const messageId=li.data("messageId");if(!messageId)return!1;const message=game.messages.get(messageId);return message?game.user.isGM&&!chatPins.isPinned(message):!1},"condition"),callback:__name(async li=>{const messageId=li.data("messageId");if(!messageId)return;const message=game.messages.get(messageId);message&&await chatPins.pin(message)},"callback")},{name:"ChatPins.UnpinMessage",icon:'<i class="fas fa-thumbtack"></i>',condition:__name(li=>{const messageId=li.data("messageId");if(!messageId)return!1;const message=game.messages.get(messageId);return message?game.user.isGM&&chatPins.isPinned(message):!1},"condition"),callback:__name(async li=>{const messageId=li.data("messageId");if(!messageId)return;const message=game.messages.get(messageId);message&&await chatPins.unpin(message)},"callback")})});
